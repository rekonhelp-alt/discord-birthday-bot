import json
import os
import sys
from contextlib import suppress
from datetime import datetime, timedelta

import discord
import pytz
from discord.ext import commands, tasks


# ==================== –ö–æ–Ω—Ñ–∏–≥ ====================
TOKEN = os.getenv("TOKEN")
GUILD_ID = os.getenv("GUILD_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ROLE_ID = os.getenv("ROLE_ID")

if not TOKEN or not GUILD_ID or not CHANNEL_ID or not ROLE_ID:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ TOKEN, GUILD_ID, CHANNEL_ID, ROLE_ID –≤ Replit Secrets.")

GUILD_ID = int(GUILD_ID)
CHANNEL_ID = int(CHANNEL_ID)
ROLE_ID = int(ROLE_ID)

BIRTHDAYS_FILE = "birthdays.json"
MESSAGE_FILE = "message.json"
MSK = pytz.timezone("Europe/Moscow")

bot = commands.Bot(command_prefix="!", intents=discord.Intents.all())


# ==================== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ====================
def load_birthdays() -> dict[str, str]:
    if not os.path.exists(BIRTHDAYS_FILE):
        return {}
    with open(BIRTHDAYS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_birthdays(birthdays: dict[str, str]) -> None:
    with open(BIRTHDAYS_FILE, "w", encoding="utf-8") as f:
        json.dump(birthdays, f, indent=4, ensure_ascii=False)


def load_message() -> str:
    if not os.path.exists(MESSAGE_FILE):
        return "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {user}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥"
    with open(MESSAGE_FILE, "r", encoding="utf-8") as f:
        return json.load(f).get(
            "message", "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {user}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥"
        )


def save_message(msg: str) -> None:
    with open(MESSAGE_FILE, "w", encoding="utf-8") as f:
        json.dump({"message": msg}, f, indent=4, ensure_ascii=False)


def parse_date(date_str: str) -> datetime | None:
    try:
        return datetime.strptime(date_str, "%d/%m")
    except ValueError:
        return None


# ==================== –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ ====================
@bot.event
async def on_ready():
    try:
        guild = discord.Object(id=GUILD_ID)
        cmds = await bot.tree.sync(guild=guild)

        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(cmds)} –∫–æ–º–∞–Ω–¥:")
        for c in cmds:
            print(f"  /{c.name} ‚Äî {c.description}")

        if not check_birthdays.is_running():
            check_birthdays.start()
        if not clear_roles.is_running():
            clear_roles.start()
        if not remind_birthdays.is_running():
            remind_birthdays.start()

        print("=====================================")
        print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("=====================================")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)


# ==================== –¢–∞—Å–∫–∏ ====================
@tasks.loop(hours=24)
async def check_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    today = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        return

    role = guild.get_role(ROLE_ID)
    message_template = load_message()

    for user_id, date in birthdays.items():
        if date == today:
            member = guild.get_member(int(user_id))
            if member and role:
                with suppress(discord.Forbidden):
                    await member.add_roles(role)

                text = message_template.replace("{user}", member.mention)
                embed = discord.Embed(
                    title="üéÇ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!",
                    description=text,
                    color=discord.Color.gold(),
                )
                await channel.send(embed=embed)


@tasks.loop(hours=24)
async def clear_roles():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    today = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    role = guild.get_role(ROLE_ID)

    if not role:
        return

    for user_id, date in birthdays.items():
        if date != today:
            member = guild.get_member(int(user_id))
            if member and role in member.roles:
                with suppress(discord.Forbidden):
                    await member.remove_roles(role)


@tasks.loop(hours=24)
async def remind_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    tomorrow = (datetime.now(MSK) + timedelta(days=1)).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        return

    role = guild.get_role(ROLE_ID)
    if not role:
        return

    for user_id, date in birthdays.items():
        if date == tomorrow:
            member = guild.get_member(int(user_id))
            if member:
                embed = discord.Embed(
                    title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
                    description=(
                        f"–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {member.mention}! "
                        f"{role.mention}, –≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅü•≥"
                    ),
                    color=discord.Color.purple(),
                )
                await channel.send(embed=embed)


# ==================== –ö–æ–º–∞–Ω–¥—ã ====================
@bot.tree.command(
    name="add_birthday",
    description="–î–æ–±–∞–≤–∏—Ç—å –î–† —É—á–∞—Å—Ç–Ω–∏–∫—É (–î–î/–ú–ú)",
    guild=discord.Object(id=GUILD_ID),
)
async def add_birthday(
    interaction: discord.Interaction, member: discord.Member, date: str
):
    parsed = parse_date(date)
    if not parsed:
        await interaction.response.send_message("‚ùå –§–æ—Ä–º–∞—Ç: –î–î/–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05/09).")
        return

    birthdays = load_birthdays()
    birthdays[str(member.id)] = date
    save_birthdays(birthdays)

    await interaction.response.send_message(
        f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {member.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {date}"
    )


@bot.tree.command(
    name="my_birthday",
    description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –î–† (–î–î/–ú–ú)",
    guild=discord.Object(id=GUILD_ID),
)
async def my_birthday(interaction: discord.Interaction, date: str):
    parsed = parse_date(date)
    if not parsed:
        await interaction.response.send_message(
            "‚ùå –§–æ—Ä–º–∞—Ç: –î–î/–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05/09).", ephemeral=True
        )
        return

    birthdays = load_birthdays()
    birthdays[str(interaction.user.id)] = date
    save_birthdays(birthdays)

    await interaction.response.send_message(
        f"‚úÖ –¢–≤–æ–π –î–† —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {date}", ephemeral=True
    )


@bot.tree.command(
    name="list_birthdays",
    description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –î–†",
    guild=discord.Object(id=GUILD_ID),
)
async def list_birthdays(interaction: discord.Interaction):
    birthdays = load_birthdays()
    if not birthdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        await interaction.response.send_message("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    today = datetime.now(MSK)
    upcoming = []

    for user_id, date_str in birthdays.items():
        parsed = parse_date(date_str)
        if not parsed:
            continue
        candidate = parsed.replace(year=today.year).replace(tzinfo=MSK)
        if candidate < today:
            candidate = candidate.replace(year=today.year + 1)
        member = guild.get_member(int(user_id))
        if member:
            upcoming.append((candidate, member, date_str))

    if not upcoming:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç.")
        return

    upcoming.sort(key=lambda x: x[0])

    embeds = []
    embed = discord.Embed(title="üìÖ –°–ø–∏—Å–æ–∫ –î–†", color=discord.Color.blue())

    for i, (_, member, date_str) in enumerate(upcoming, start=1):
        embed.add_field(
            name=f"{i}. {member.display_name}",
            value=f"üéÇ {date_str}",
            inline=False
        )

        if i % 25 == 0:
            embeds.append(embed)
            embed = discord.Embed(title="üìÖ –°–ø–∏—Å–æ–∫ –î–† (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)", color=discord.Color.blue()
)

    if embed.fields:
        embeds.append(embed)

    await interaction.response.send_message(embeds=embeds)


@bot.tree.command(
    name="next_birthday",
    description="–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –î–†",
    guild=discord.Object(id=GUILD_ID),
)
async def next_birthday(interaction: discord.Interaction):
    birthdays = load_birthdays()
    if not birthdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    today = datetime.now(MSK)
    upcoming = []

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        await interaction.response.send_message("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    for user_id, date_str in birthdays.items():
        parsed = parse_date(date_str)
        if not parsed:
            continue
        candidate = parsed.replace(year=today.year).replace(tzinfo=MSK)
        if candidate < today:
            candidate = candidate.replace(year=today.year + 1)
        member = guild.get_member(int(user_id))
        if member:
            upcoming.append((candidate, member, date_str))

    if not upcoming:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç.")
        return

    nearest = min(upcoming, key=lambda x: x[0])
    _, member, date_str = nearest

    await interaction.response.send_message(
        f"üéÇ –ë–ª–∏–∂–∞–π—à–∏–π –î–† —É {member.mention}: {date_str}"
    )


@bot.tree.command(
    name="remove_birthday",
    description="–£–¥–∞–ª–∏—Ç—å –î–† —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    guild=discord.Object(id=GUILD_ID),
)
async def remove_birthday(
    interaction: discord.Interaction, member: discord.Member
):
    birthdays = load_birthdays()
    if str(member.id) in birthdays:
        del birthdays[str(member.id)]
        save_birthdays(birthdays)
        await interaction.response.send_message(f"üóë –î–† {member.mention} —É–¥–∞–ª—ë–Ω.")
    else:
        await interaction.response.send_message("‚ùå –£ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –î–†.")


@bot.tree.command(
    name="set_message",
    description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π {user})",
    guild=discord.Object(id=GUILD_ID),
)
async def set_message(interaction: discord.Interaction, *, text: str):
    save_message(text)
    await interaction.response.send_message(f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω.")


# ==================== –ó–∞–ø—É—Å–∫ ====================
bot.run(TOKEN)
