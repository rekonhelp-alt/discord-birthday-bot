import os
import sys
import psycopg2
from contextlib import suppress
from datetime import datetime, timedelta
import discord
from discord.ext import commands, tasks
import pytz
from keep_alive import keep_alive

# ================== –ö–æ–Ω—Ñ–∏–≥ ==================
TOKEN = os.getenv("TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ROLE_ID = int(os.getenv("ROLE_ID"))
DATABASE_URL = os.getenv("DATABASE_URL")

if not all([TOKEN, GUILD_ID, CHANNEL_ID, ROLE_ID, DATABASE_URL]):
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (TOKEN, GUILD_ID, CHANNEL_ID, ROLE_ID, DATABASE_URL)")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MSK = pytz.timezone("Europe/Moscow")

# ================== DB ==================
def get_conn():
    return psycopg2.connect(DATABASE_URL, sslmode="require")

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS birthdays (
            user_id BIGINT PRIMARY KEY,
            date TEXT NOT NULL
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS message_template (
            id SERIAL PRIMARY KEY,
            text TEXT NOT NULL
        );
        """)
        conn.commit()

def save_birthday(user_id: int, date: str):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO birthdays (user_id, date)
            VALUES (%s, %s)
            ON CONFLICT (user_id) DO UPDATE SET date = EXCLUDED.date;
        """, (user_id, date))
        conn.commit()

def remove_birthday(user_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("DELETE FROM birthdays WHERE user_id = %s;", (user_id,))
        conn.commit()

def load_birthdays():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT user_id, date FROM birthdays;")
        return {str(uid): date for uid, date in cur.fetchall()}

def save_message(text: str):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("DELETE FROM message_template;")
        cur.execute("INSERT INTO message_template (text) VALUES (%s);", (text,))
        conn.commit()

def load_message():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT text FROM message_template ORDER BY id DESC LIMIT 1;")
        row = cur.fetchone()
        return row[0] if row else "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {user}!"

# ================== –ë–æ—Ç ==================
intents = discord.Intents.default()
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ---------------- –°–õ–≠–®-–ö–û–ú–ê–ù–î–´ ----------------
@bot.tree.command(name="add_birthday", description="–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–î/–ú–ú)")
async def add_birthday(interaction: discord.Interaction, date: str):
    try:
        datetime.strptime(date, "%d/%m")
    except ValueError:
        await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î/–ú–ú.", ephemeral=True)
        return
    save_birthday(interaction.user.id, date)
    await interaction.response.send_message(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {interaction.user.mention} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {date}")

@bot.tree.command(name="my_birthday", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
async def my_birthday(interaction: discord.Interaction):
    birthdays = load_birthdays()
    bday = birthdays.get(str(interaction.user.id))
    if bday:
        await interaction.response.send_message(f"üéÇ –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}")
    else:
        await interaction.response.send_message("‚ùå –¢—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.")

@bot.tree.command(name="remove_birthday", description="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
async def remove_birthday_cmd(interaction: discord.Interaction):
    remove_birthday(interaction.user.id)
    await interaction.response.send_message("üóëÔ∏è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω.")

@bot.tree.command(name="list_birthdays", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
async def list_birthdays(interaction: discord.Interaction):
    birthdays = load_birthdays()
    if not birthdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ—Ç –±–ª–∏–∂–∞–π—à–µ–π
    today = datetime.now(MSK)
    sorted_birthdays = sorted(
        birthdays.items(),
        key=lambda x: (datetime.strptime(x[1], "%d/%m").replace(year=today.year) - today).days % 365
    )

    chunks = [sorted_birthdays[i:i + 25] for i in range(0, len(sorted_birthdays), 25)]
    embeds = []
    for chunk in chunks:
        embed = discord.Embed(title="üìÖ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", color=discord.Color.blurple())
        for user_id, date in chunk:
            user = interaction.guild.get_member(int(user_id))
            if user:
                embed.add_field(name=user.display_name, value=date, inline=False)
        embeds.append(embed)

    for embed in embeds:
        await interaction.response.send_message(embed=embeds[0])
        for extra in embeds[1:]:
            await interaction.followup.send(embed=extra)

@bot.tree.command(name="next_birthday", description="–ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
async def next_birthday(interaction: discord.Interaction):
    birthdays = load_birthdays()
    if not birthdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    today = datetime.now(MSK)
    next_user, next_date = min(
        birthdays.items(),
        key=lambda x: (datetime.strptime(x[1], "%d/%m").replace(year=today.year) - today).days % 365
    )

    member = interaction.guild.get_member(int(next_user))
    if member:
        await interaction.response.send_message(f"üéâ –ë–ª–∏–∂–∞–π—à–∏–π –î–† —É {member.mention} ({next_date})")

@bot.tree.command(name="set_message", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π {user})")
async def set_message(interaction: discord.Interaction, text: str):
    save_message(text)
    await interaction.response.send_message("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω.")

# ---------------- –¢–ê–°–ö–ò ----------------
@tasks.loop(hours=24)
async def check_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    today = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    role = guild.get_role(ROLE_ID)
    message_template = load_message()

    for user_id, date in birthdays.items():
        if date == today:
            member = guild.get_member(int(user_id))
            if member and role:
                with suppress(discord.Forbidden):
                    await member.add_roles(role)

                text = message_template.replace("{user}", member.mention)
                embed = discord.Embed(title="üéÇ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!", description=text, color=discord.Color.gold())
                await channel.send(embed=embed)

@tasks.loop(hours=24)
async def clear_roles():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return
    today = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    role = guild.get_role(ROLE_ID)
    for user_id, date in birthdays.items():
        if date != today:
            member = guild.get_member(int(user_id))
            if member and role in member.roles:
                with suppress(discord.Forbidden):
                    await member.remove_roles(role)

@tasks.loop(hours=24)
async def remind_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return
    tomorrow = (datetime.now(MSK) + timedelta(days=1)).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    role = guild.get_role(ROLE_ID)

    for user_id, date in birthdays.items():
        if date == tomorrow:
            member = guild.get_member(int(user_id))
            if member:
                embed = discord.Embed(
                    title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
                    description=f"–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {member.mention}! {role.mention}, –≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅü•≥",
                    color=discord.Color.purple(),
                )
                await channel.send(embed=embed)

# ---------------- –ó–ê–ü–£–°–ö ----------------
@bot.event
async def on_ready():
    try:
        await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
        if not check_birthdays.is_running():
            check_birthdays.start()
        if not clear_roles.is_running():
            clear_roles.start()
        if not remind_birthdays.is_running():
            remind_birthdays.start()
        print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    init_db()
    keep_alive()
    bot.run(TOKEN)
