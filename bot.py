import json
import os
import sys
from contextlib import suppress
from datetime import datetime, timedelta

import discord
import pytz
from discord.ext import commands, tasks

from keep_alive import keep_alive  # –æ—Å—Ç–∞–≤–∏–ª, —Ç.–∫. —Ç—ã –¥–µ–ø–ª–æ–∏—à—å –Ω–∞ Render

# ==================== –ö–æ–Ω—Ñ–∏–≥ ====================
TOKEN = os.getenv("TOKEN")
GUILD_ID = os.getenv("GUILD_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ROLE_ID = os.getenv("ROLE_ID")

if not TOKEN or not GUILD_ID or not CHANNEL_ID or not ROLE_ID:
    raise ValueError(
        "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! "
        "–ó–∞–¥–∞–π TOKEN, GUILD_ID, CHANNEL_ID, ROLE_ID –≤ Render Secrets."
    )

GUILD_ID = int(GUILD_ID)
CHANNEL_ID = int(CHANNEL_ID)
ROLE_ID = int(ROLE_ID)

BIRTHDAYS_FILE = "birthdays.json"
MESSAGE_FILE = "message.json"

MSK = pytz.timezone("Europe/Moscow")

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)


# ==================== –§–∞–π–ª—ã ====================
def load_birthdays() -> dict[str, str]:
    if not os.path.exists(BIRTHDAYS_FILE):
        return {}
    with open(BIRTHDAYS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_birthdays(birthdays: dict[str, str]) -> None:
    with open(BIRTHDAYS_FILE, "w", encoding="utf-8") as f:
        json.dump(birthdays, f, indent=4, ensure_ascii=False)


def load_message() -> str:
    if not os.path.exists(MESSAGE_FILE):
        return "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {user}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥"
    with open(MESSAGE_FILE, "r", encoding="utf-8") as f:
        return json.load(f).get(
            "message", "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {user}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥"
        )


def save_message(msg: str) -> None:
    with open(MESSAGE_FILE, "w", encoding="utf-8") as f:
        json.dump({"message": msg}, f, indent=4, ensure_ascii=False)


def parse_date(date_str: str) -> datetime | None:
    try:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –≥–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1900 —á—Ç–æ–±—ã strptime –ø—Ä–æ—à–µ–ª
        return datetime.strptime(date_str, "%d/%m")
    except ValueError:
        return None


def normalize_ddmm(s: str) -> str:
    """–í–µ—Ä–Ω—ë—Ç –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏."""
    dt = parse_date(s)
    return dt.strftime("%d/%m") if dt else s


# ==================== –°–æ–±—ã—Ç–∏—è ====================
@bot.event
async def on_ready():
    try:
        guild_obj = discord.Object(id=GUILD_ID)

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –Ω–∞ –Ω—É–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö)
        synced = await bot.tree.sync(guild=guild_obj)
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {GUILD_ID}:")
        for c in synced:
            print(f"  /{c.name} ‚Äî {c.description}")

        # –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        if not check_birthdays.is_running():
            check_birthdays.start()
        if not clear_roles.is_running():
            clear_roles.start()
        if not remind_birthdays.is_running():
            remind_birthdays.start()

        print("=====================================")
        print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("=====================================")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)


# ==================== –¢–∞—Å–∫–∏ ====================
@tasks.loop(hours=24)
async def check_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    today_ddmm = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        return

    role = guild.get_role(ROLE_ID)
    message_template = load_message()

    for user_id, ddmm in birthdays.items():
        if ddmm == today_ddmm:
            member = guild.get_member(int(user_id))
            if member and role:
                with suppress(discord.Forbidden):
                    await member.add_roles(role)
                text = message_template.replace("{user}", member.mention)
                embed = discord.Embed(
                    title="üéÇ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è!",
                    description=text,
                    color=discord.Color.gold(),
                )
                await channel.send(embed=embed)


@tasks.loop(hours=24)
async def clear_roles():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    today_ddmm = datetime.now(MSK).strftime("%d/%m")
    birthdays = load_birthdays()
    role = guild.get_role(ROLE_ID)
    if not role:
        return

    for user_id, ddmm in birthdays.items():
        if ddmm != today_ddmm:
            member = guild.get_member(int(user_id))
            if member and role in member.roles:
                with suppress(discord.Forbidden):
                    await member.remove_roles(role)


@tasks.loop(hours=24)
async def remind_birthdays():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    tomorrow_ddmm = (datetime.now(MSK) + timedelta(days=1)).strftime("%d/%m")
    birthdays = load_birthdays()
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        return

    ping_role = discord.utils.get(guild.roles, name="Madison")
    for user_id, ddmm in birthdays.items():
        if ddmm == tomorrow_ddmm:
            member = guild.get_member(int(user_id))
            if member:
                mention_txt = (
                    f"{ping_role.mention}, " if ping_role else ""
                )
                embed = discord.Embed(
                    title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
                    description=(
                        f"–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {member.mention}! "
                        f"{mention_txt}–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅü•≥"
                    ),
                    color=discord.Color.purple(),
                )
                await channel.send(embed=embed)


# ==================== –ö–æ–º–∞–Ω–¥—ã ====================
GUILD_SCOPE = discord.Object(id=GUILD_ID)


@bot.tree.command(
    name="add_birthday",
    description="–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É (–î–î/–ú–ú)",
    guild=GUILD_SCOPE,
)
async def add_birthday(
    interaction: discord.Interaction,
    member: discord.Member,
    date: str,
):
    """–ü—Ä–∞–≤–∏—Ç –î–† –ò–ú–ï–ù–ù–û –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    parsed = parse_date(date)
    if not parsed:
        await interaction.response.send_message(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î/–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05/09).",
            ephemeral=True,
        )
        return

    bdays = load_birthdays()
    bdays[str(member.id)] = normalize_ddmm(date)
    save_birthdays(bdays)

    await interaction.response.send_message(
        f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {member.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ "
        f"{bdays[str(member.id)]}",
        ephemeral=True,
    )


@bot.tree.command(
    name="my_birthday",
    description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î/–ú–ú)",
    guild=GUILD_SCOPE,
)
async def my_birthday(interaction: discord.Interaction, date: str):
    parsed = parse_date(date)
    if not parsed:
        await interaction.response.send_message(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î/–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05/09).",
            ephemeral=True,
        )
        return

    bdays = load_birthdays()
    bdays[str(interaction.user.id)] = normalize_ddmm(date)
    save_birthdays(bdays)

    await interaction.response.send_message(
        f"‚úÖ –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {bdays[str(interaction.user.id)]}",
        ephemeral=True,
    )


@bot.tree.command(
    name="remove_birthday",
    description="–£–¥–∞–ª–∏—Ç—å –î–† —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å ‚Äî —É–¥–∞–ª–∏—Ç —Ç–≤–æ–π)",
    guild=GUILD_SCOPE,
)
async def remove_birthday(
    interaction: discord.Interaction,
    member: discord.Member | None = None,
):
    target = member or interaction.user
    bdays = load_birthdays()

    if str(target.id) in bdays:
        del bdays[str(target.id)]
        save_birthdays(bdays)
        await interaction.response.send_message(
            f"üóë –î–† –¥–ª—è {target.mention} —É–¥–∞–ª—ë–Ω.",
            ephemeral=True,
        )
    else:
        await interaction.response.send_message(
            "‚ùå –£ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –î–†.",
            ephemeral=True,
        )


@bot.tree.command(
    name="set_message",
    description="–ó–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π {user})",
    guild=GUILD_SCOPE,
)
async def set_message(interaction: discord.Interaction, *, text: str):
    save_message(text)
    await interaction.response.send_message(
        "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω.",
        ephemeral=True,
    )


@bot.tree.command(
    name="list_birthdays",
    description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –î–† –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ",
    guild=GUILD_SCOPE,
)
async def list_birthdays(interaction: discord.Interaction):
    bdays = load_birthdays()
    if not bdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        await interaction.response.send_message("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    today = datetime.now(MSK)
    upcoming: list[tuple[datetime, discord.Member, str]] = []

    for user_id, ddmm in bdays.items():
        parsed = parse_date(ddmm)
        if not parsed:
            continue

        # candidate ‚Äî aware datetime –≤ —Ç–µ–∫—É—â–µ–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É
        candidate = parsed.replace(year=today.year).replace(tzinfo=MSK)
        if candidate < today:
            candidate = candidate.replace(year=today.year + 1)

        member = guild.get_member(int(user_id))
        if member:
            upcoming.append((candidate, member, normalize_ddmm(ddmm)))

    if not upcoming:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç.")
        return

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ
    upcoming.sort(key=lambda x: x[0])

    # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —ç–º–±–µ–¥ 25 –ø–æ–ª—è–º–∏ ‚Üí —à–ª—ë–º –±–∞—Ç—á–∞–º–∏
    CHUNK = 25
    chunks = [upcoming[i : i + CHUNK] for i in range(0, len(upcoming), CHUNK)]

    embeds: list[discord.Embed] = []
    for idx, chunk in enumerate(chunks, start=1):
        embed = discord.Embed(
            title="üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è" + (f" ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {idx}" if len(chunks) > 1 else ""),
            color=discord.Color.blue(),
        )
        for _, member, ddmm in chunk:
            embed.add_field(name=member.display_name, value=f"üéÇ {ddmm}", inline=False)
        embeds.append(embed)

    # –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —à–ª—ë–º –æ–¥–∏–Ω —ç–º–±–µ–¥, –∏–Ω–∞—á–µ ‚Äî –≤—Å–µ
    if len(embeds) == 1:
        await interaction.response.send_message(embed=embeds[0])
    else:
        await interaction.response.send_message(embeds=embeds)


@bot.tree.command(
    name="next_birthday",
    description="–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –î–†",
    guild=GUILD_SCOPE,
)
async def next_birthday(interaction: discord.Interaction):
    bdays = load_birthdays()
    if not bdays:
        await interaction.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        await interaction.response.send_message("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    today = datetime.now(MSK)
    candidates: list[tuple[datetime, discord.Member, str]] = []

    for user_id, ddmm in bdays.items():
        parsed = parse_date(ddmm)
        if not parsed:
            continue
        candidate = parsed.replace(year=today.year).replace(tzinfo=MSK)
        if candidate < today:
            candidate = candidate.replace(year=today.year + 1)
        member = guild.get_member(int(user_id))
        if member:
            candidates.append((candidate, member, normalize_ddmm(ddmm)))

    if not candidates:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç.")
        return

    nearest = min(candidates, key=lambda x: x[0])
    _, member, ddmm = nearest
    await interaction.response.send_message(
        f"üéÇ –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {member.mention}: {ddmm}"
    )


# ==================== –ó–∞–ø—É—Å–∫ ====================
keep_alive()
bot.run(TOKEN)
